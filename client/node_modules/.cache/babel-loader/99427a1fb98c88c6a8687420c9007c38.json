{"ast":null,"code":"var _jsxFileName = \"/Users/rahulgoud/rahul/intern/client/src/components/CursorTracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CursorTracker = () => {\n  _s();\n\n  const [cursorActiveTime, setCursorActiveTime] = useState(0);\n  useEffect(() => {\n    let lastCursorActivityTime = Date.now(); // Function to calculate cursor inactivity\n\n    const calculateInactivity = () => {\n      const currentTime = Date.now();\n      const inactivityDuration = currentTime - lastCursorActivityTime;\n      setCursorActiveTime(inactivityDuration / 1000); // Convert to seconds\n    };\n\n    const handleMouseMove = () => {\n      lastCursorActivityTime = Date.now();\n      calculateInactivity();\n    }; // Detect when the user goes off the page\n\n\n    window.onblur = () => {\n      calculateInactivity();\n    }; // Start with an initial calculation\n\n\n    calculateInactivity(); // Send cursor activity data to the server every minute\n\n    const sendCursorActivityToServer = () => {\n      axios.post('/api/cursor-activity', {\n        time: cursorActiveTime\n      });\n    };\n\n    const activityInterval = setInterval(sendCursorActivityToServer, 60000);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearInterval(activityInterval);\n    };\n  }, [cursorActiveTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time with cursor on the page: \", cursorActiveTime, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CursorTracker, \"O1moNmQ0JiFRs31cFMxtGJpIpQg=\");\n\n_c = CursorTracker;\nexport default CursorTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"CursorTracker\");","map":{"version":3,"sources":["/Users/rahulgoud/rahul/intern/client/src/components/CursorTracker.js"],"names":["React","useState","useEffect","axios","CursorTracker","cursorActiveTime","setCursorActiveTime","lastCursorActivityTime","Date","now","calculateInactivity","currentTime","inactivityDuration","handleMouseMove","window","onblur","sendCursorActivityToServer","post","time","activityInterval","setInterval","removeEventListener","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CL,QAAQ,CAAC,CAAD,CAAxD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,sBAAsB,GAAGC,IAAI,CAACC,GAAL,EAA7B,CADc,CAGd;;AACA,UAAMC,mBAAmB,GAAG,MAAM;AAChC,YAAMC,WAAW,GAAGH,IAAI,CAACC,GAAL,EAApB;AACA,YAAMG,kBAAkB,GAAGD,WAAW,GAAGJ,sBAAzC;AACAD,MAAAA,mBAAmB,CAACM,kBAAkB,GAAG,IAAtB,CAAnB,CAHgC,CAGgB;AACjD,KAJD;;AAMA,UAAMC,eAAe,GAAG,MAAM;AAC5BN,MAAAA,sBAAsB,GAAGC,IAAI,CAACC,GAAL,EAAzB;AACAC,MAAAA,mBAAmB;AACpB,KAHD,CAVc,CAed;;;AACAI,IAAAA,MAAM,CAACC,MAAP,GAAgB,MAAM;AACpBL,MAAAA,mBAAmB;AACpB,KAFD,CAhBc,CAoBd;;;AACAA,IAAAA,mBAAmB,GArBL,CAuBd;;AACA,UAAMM,0BAA0B,GAAG,MAAM;AACvCb,MAAAA,KAAK,CAACc,IAAN,CAAW,sBAAX,EAAmC;AAAEC,QAAAA,IAAI,EAAEb;AAAR,OAAnC;AACD,KAFD;;AAIA,UAAMc,gBAAgB,GAAGC,WAAW,CAACJ,0BAAD,EAA6B,KAA7B,CAApC;AAEA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACO,mBAAP,CAA2B,WAA3B,EAAwCR,eAAxC;AACAS,MAAAA,aAAa,CAACH,gBAAD,CAAb;AACD,KAHD;AAID,GAlCQ,EAkCN,CAACd,gBAAD,CAlCM,CAAT;AAoCA,sBACE;AAAA,2BACE;AAAA,iBAAG,gCAAH,EAAkCA,gBAAlC,EAAmD,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5CD;;GAAMD,a;;KAAAA,a;AA8CN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CursorTracker = () => {\n  const [cursorActiveTime, setCursorActiveTime] = useState(0);\n\n  useEffect(() => {\n    let lastCursorActivityTime = Date.now();\n\n    // Function to calculate cursor inactivity\n    const calculateInactivity = () => {\n      const currentTime = Date.now();\n      const inactivityDuration = currentTime - lastCursorActivityTime;\n      setCursorActiveTime(inactivityDuration / 1000); // Convert to seconds\n    };\n\n    const handleMouseMove = () => {\n      lastCursorActivityTime = Date.now();\n      calculateInactivity();\n    };\n\n    // Detect when the user goes off the page\n    window.onblur = () => {\n      calculateInactivity();\n    };\n\n    // Start with an initial calculation\n    calculateInactivity();\n\n    // Send cursor activity data to the server every minute\n    const sendCursorActivityToServer = () => {\n      axios.post('/api/cursor-activity', { time: cursorActiveTime });\n    };\n\n    const activityInterval = setInterval(sendCursorActivityToServer, 60000);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearInterval(activityInterval);\n    };\n  }, [cursorActiveTime]);\n\n  return (\n    <div>\n      <p>Time with cursor on the page: {cursorActiveTime} seconds</p>\n    </div>\n  );\n};\n\nexport default CursorTracker;\n"]},"metadata":{},"sourceType":"module"}